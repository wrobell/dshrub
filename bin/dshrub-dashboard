#!/usr/bin/env python
#
# DShrub - sensor data application.
#
# Copyright (C) 2015 by Artur Wroblewski <wrobell@pld-linux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Start dashboard on HTTP server and read data from Redis channel.
"""

import argparse
import logging

parser = argparse.ArgumentParser()
parser.add_argument(
    '-v', '--verbose', action='store_true', dest='verbose', default=False,
        help='explain what is being done'
)
parser.add_argument('dashboard', help='dashboard directory')
parser.add_argument('channel', help='redis channel to read data from')
parser.add_argument(
    'sensors', nargs='+', help='list of sensors for which data is expected'
)
args = parser.parse_args()

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.WARN)


import asyncio
import json
from collections import deque

import tornado.web
import tawf

from dshrub.data import Cache, bin_data
from dshrub.redis import Channel

logger = logging.getLogger(__name__)

app = tawf.Application([
    (r'/(.*)', tornado.web.StaticFileHandler, {'path': args.dashboard}),
])

config = {
    'refresh': 1,
    'data': args.sensors,
}


@app.route('/data', tawf.Method.OPTIONS, mimetype='application/json')
def conf():
    return config


@app.route('/data/{sensor}', mimetype='application/json')
def data(sensor):
    data = cache[sensor]
    return bin_data(data, 'mean', 480)


@app.sse('/data')
async def data(callback):
    async with Channel(args.channel) as channel:
        while True:
            data = await channel.get()
            callback(data.decode())


async def cache_data(cache):
    from dshrub.data import cache_data
    async with Channel(args.channel) as channel:
        await cache_data(channel.get_json, cache)


cache = Cache(args.sensors)
app.listen(8090, address='0.0.0.0')
loop = asyncio.get_event_loop()
loop.run_until_complete(cache_data(cache))

# vim: sw=4:et:ai
